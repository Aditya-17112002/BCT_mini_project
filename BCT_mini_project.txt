// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }

    struct Voter {
        bool authorized;
        bool voted;
        uint vote;
    }

    address public owner;
    string public electionName;

    mapping(address => Voter) public voters;
    Candidate[] public candidates;
    uint public totalVotes;

    modifier ownerOnly() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    constructor(string memory _electionName) {
        owner = msg.sender;
        electionName = _electionName;
    }

    // Add candidates to the election
    function addCandidate(string memory _name) public ownerOnly {
        candidates.push(Candidate(candidates.length, _name, 0));
    }

    // Authorize a voter to vote
    function authorizeVoter(address _voter) public ownerOnly {
        voters[_voter].authorized = true;
    }

    // Cast vote
    function vote(uint _candidateId) public {
        require(voters[msg.sender].authorized, "You are not authorized to vote.");
        require(!voters[msg.sender].voted, "You have already voted.");
        require(_candidateId < candidates.length, "Invalid candidate.");

        voters[msg.sender].voted = true;
        voters[msg.sender].vote = _candidateId;

        candidates[_candidateId].voteCount += 1;
        totalVotes += 1;
    }

    // Get the number of candidates
    function getNumCandidates() public view returns (uint) {
        return candidates.length;
    }

    // Get the candidate details
    function getCandidate(uint _candidateId) public view returns (string memory, uint) {
        require(_candidateId < candidates.length, "Invalid candidate.");
        return (candidates[_candidateId].name, candidates[_candidateId].voteCount);
    }

    // End election and announce the winner
    function endElection() public ownerOnly view returns (string memory winnerName, uint winnerVoteCount) {
        uint winnerVoteCountTemp = 0;
        string memory winnerNameTemp;

        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].voteCount > winnerVoteCountTemp) {
                winnerVoteCountTemp = candidates[i].voteCount;
                winnerNameTemp = candidates[i].name;
            }
        }

        return (winnerNameTemp, winnerVoteCountTemp);
    }
}
